{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAwB,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAGtF,MAAM,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;AAEjC,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAA9C;;QACU,mBAAc,GAAsC,IAAI,GAAG,EAAE,CAAC;IA+CxE,CAAC;IA7CC,KAAK,CAAC,QAAQ;QACZ,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACnD,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;SAC9C;IACP,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,IAAS,EAAE,EAAE;YAC5D,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,OAAwB;QACjD,IAAI,SAAS,CAAC,QAAQ,KAAK,SAAS,EAAE;YACpC,MAAM,YAAY,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACjD,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;SAC9D;IACH,CAAC;IAED,KAAK,CAAC,uBAAuB;IAE7B,CAAC;IAED,KAAK,CAAC,kCAAkC,CAAC,OAAqC;QAC5E,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,0BAA0B;QAC9B,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAA;QAC5E,OAAO,EAAE,0BAA0B,EAAE,KAAK,EAAE,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAA2B;QACzC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAA2B;QACzC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;CACF","sourcesContent":["import { Capacitor, PluginListenerHandle, Plugins, WebPlugin } from '@capacitor/core';\n\nimport { SpeedCheckerPlugin } from './definitions';\nconst { SpeedChecker } = Plugins;\n\nexport class SpeedCheckerWeb extends WebPlugin implements SpeedCheckerPlugin {\n  private eventListeners: Map<string, PluginListenerHandle> = new Map();\n\n  async stopTest(): Promise<void> {\n    console.log('stopping test from Capacitor side');\n    const handle = this.eventListeners.get('dataReceived');\n        if (handle) {\n            handle.remove();\n            this.eventListeners.delete('dataReceived');\n        }\n  }\n\n  async startTest(): Promise<void> {\n    console.log('Starting test from Capacitor side');\n    const handle = this.addListener('dataReceived', (data: any) => {\n      console.log('Received data from Android:', data);\n    });\n\n    this.eventListeners.set('dataReceived', handle);\n  }\n\n  async setAndroidLicenseKey(options: { key: string }): Promise<void> {\n    if (Capacitor.platform === 'android') {\n      await SpeedChecker.setAndroidLicenseKey(options);\n      console.log('Android license key is set to: ' + options.key);\n    }\n  }\n\n  async shareBackgroundTestLogs(): Promise<void> {\n    \n  }\n\n  async setBackgroundNetworkTestingEnabled(options: { bgTestingStatus: boolean }): Promise<void> {\n    console.log(\"Background testing enabled:\", options.bgTestingStatus);\n  }\n\n  async getBackgroundTestingStatus(): Promise<{ getBackgroundTestingStatus: boolean }> {\n    console.log(\"Background Testing Status: \" + this.getBackgroundTestingStatus)\n    return { getBackgroundTestingStatus: false };\n  }\n\n  async setMSISDN(options: { msisdn: string }): Promise<void> {\n    console.log(\"MSISDN: \", options.msisdn);\n  }\n\n  async setUserId(options: { userId: string }): Promise<void> {\n    console.log(\"Uswr ID: \", options.userId);\n  }\n}\n"]}